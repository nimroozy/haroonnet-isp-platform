from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone
import uuid

User = get_user_model()


class NetworkDevice(models.Model):
    """Network devices monitored by NOC"""
    DEVICE_TYPE_CHOICES = (
        ('router', 'Router'),
        ('switch', 'Switch'),
        ('firewall', 'Firewall'),
        ('server', 'Server'),
        ('ap', 'Access Point'),
        ('olt', 'OLT'),
        ('onu', 'ONU'),
        ('ups', 'UPS'),
        ('other', 'Other'),
    )
    
    STATUS_CHOICES = (
        ('online', 'Online'),
        ('offline', 'Offline'),
        ('warning', 'Warning'),
        ('critical', 'Critical'),
        ('maintenance', 'Under Maintenance'),
    )
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=200, unique=True)
    device_type = models.CharField(max_length=20, choices=DEVICE_TYPE_CHOICES)
    
    # Network details
    ip_address = models.GenericIPAddressField(unique=True)
    mac_address = models.CharField(max_length=17, blank=True)
    hostname = models.CharField(max_length=255, blank=True)
    
    # Location
    location = models.CharField(max_length=500)
    latitude = models.DecimalField(max_digits=9, decimal_places=6, null=True, blank=True)
    longitude = models.DecimalField(max_digits=9, decimal_places=6, null=True, blank=True)
    
    # Device info
    manufacturer = models.CharField(max_length=100, blank=True)
    model = models.CharField(max_length=100, blank=True)
    serial_number = models.CharField(max_length=100, blank=True)
    firmware_version = models.CharField(max_length=50, blank=True)
    
    # Monitoring
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='offline')
    last_seen = models.DateTimeField(null=True, blank=True)
    uptime = models.IntegerField(default=0, help_text="Uptime in seconds")
    
    # SNMP settings
    snmp_enabled = models.BooleanField(default=True)
    snmp_community = models.CharField(max_length=100, default='public')
    snmp_version = models.CharField(max_length=10, default='2c')
    
    # Credentials
    username = models.CharField(max_length=100, blank=True)
    password = models.CharField(max_length=255, blank=True)  # Should be encrypted
    enable_password = models.CharField(max_length=255, blank=True)  # Should be encrypted
    
    # Monitoring settings
    monitor_enabled = models.BooleanField(default=True)
    check_interval = models.IntegerField(default=300, help_text="Check interval in seconds")
    
    # Metadata
    notes = models.TextField(blank=True)
    tags = models.JSONField(default=list, blank=True)
    custom_fields = models.JSONField(default=dict, blank=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'network_devices'
        ordering = ['name']
        indexes = [
            models.Index(fields=['status', 'device_type']),
        ]
    
    def __str__(self):
        return f"{self.name} ({self.ip_address})"


class NetworkInterface(models.Model):
    """Network interfaces on devices"""
    STATUS_CHOICES = (
        ('up', 'Up'),
        ('down', 'Down'),
        ('admin_down', 'Administratively Down'),
        ('testing', 'Testing'),
    )
    
    device = models.ForeignKey(NetworkDevice, on_delete=models.CASCADE, related_name='interfaces')
    name = models.CharField(max_length=100)
    description = models.CharField(max_length=500, blank=True)
    
    # Interface details
    interface_type = models.CharField(max_length=50, blank=True)
    mac_address = models.CharField(max_length=17, blank=True)
    mtu = models.IntegerField(default=1500)
    
    # Status
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='down')
    admin_status = models.BooleanField(default=True)
    
    # Statistics
    speed = models.BigIntegerField(null=True, blank=True, help_text="Speed in bps")
    in_octets = models.BigIntegerField(default=0)
    out_octets = models.BigIntegerField(default=0)
    in_errors = models.BigIntegerField(default=0)
    out_errors = models.BigIntegerField(default=0)
    
    # IP addresses
    ip_addresses = models.JSONField(default=list, blank=True)
    
    last_updated = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'network_interfaces'
        unique_together = ('device', 'name')
        ordering = ['device', 'name']
    
    def __str__(self):
        return f"{self.device.name} - {self.name}"


class NetworkAlert(models.Model):
    """Alerts generated by network monitoring"""
    SEVERITY_CHOICES = (
        ('info', 'Information'),
        ('warning', 'Warning'),
        ('error', 'Error'),
        ('critical', 'Critical'),
    )
    
    ALERT_TYPE_CHOICES = (
        ('device_down', 'Device Down'),
        ('interface_down', 'Interface Down'),
        ('high_cpu', 'High CPU Usage'),
        ('high_memory', 'High Memory Usage'),
        ('high_bandwidth', 'High Bandwidth Usage'),
        ('packet_loss', 'Packet Loss'),
        ('latency', 'High Latency'),
        ('power', 'Power Issue'),
        ('temperature', 'Temperature Alert'),
        ('custom', 'Custom Alert'),
    )
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    device = models.ForeignKey(NetworkDevice, on_delete=models.CASCADE, related_name='alerts')
    interface = models.ForeignKey(NetworkInterface, on_delete=models.CASCADE, null=True, blank=True)
    
    # Alert details
    alert_type = models.CharField(max_length=30, choices=ALERT_TYPE_CHOICES)
    severity = models.CharField(max_length=20, choices=SEVERITY_CHOICES)
    title = models.CharField(max_length=500)
    message = models.TextField()
    
    # Status
    is_acknowledged = models.BooleanField(default=False)
    acknowledged_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    acknowledged_at = models.DateTimeField(null=True, blank=True)
    
    is_resolved = models.BooleanField(default=False)
    resolved_at = models.DateTimeField(null=True, blank=True)
    resolution_notes = models.TextField(blank=True)
    
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    # Alert data
    metric_value = models.DecimalField(max_digits=20, decimal_places=2, null=True, blank=True)
    threshold_value = models.DecimalField(max_digits=20, decimal_places=2, null=True, blank=True)
    
    class Meta:
        db_table = 'network_alerts'
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['is_resolved', 'severity']),
            models.Index(fields=['device', 'created_at']),
        ]
    
    def __str__(self):
        return f"{self.device.name} - {self.title}"


class MetricData(models.Model):
    """Time series metric data for devices"""
    METRIC_TYPE_CHOICES = (
        ('cpu', 'CPU Usage'),
        ('memory', 'Memory Usage'),
        ('bandwidth_in', 'Bandwidth In'),
        ('bandwidth_out', 'Bandwidth Out'),
        ('latency', 'Latency'),
        ('packet_loss', 'Packet Loss'),
        ('temperature', 'Temperature'),
        ('power', 'Power'),
        ('custom', 'Custom'),
    )
    
    device = models.ForeignKey(NetworkDevice, on_delete=models.CASCADE, related_name='metrics')
    interface = models.ForeignKey(NetworkInterface, on_delete=models.CASCADE, null=True, blank=True)
    
    metric_type = models.CharField(max_length=30, choices=METRIC_TYPE_CHOICES)
    value = models.DecimalField(max_digits=20, decimal_places=2)
    unit = models.CharField(max_length=20, blank=True)
    
    timestamp = models.DateTimeField(default=timezone.now)
    
    class Meta:
        db_table = 'metric_data'
        ordering = ['-timestamp']
        indexes = [
            models.Index(fields=['device', 'metric_type', 'timestamp']),
            models.Index(fields=['timestamp']),
        ]
    
    def __str__(self):
        return f"{self.device.name} - {self.metric_type}: {self.value}"


class MaintenanceWindow(models.Model):
    """Scheduled maintenance windows"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    title = models.CharField(max_length=500)
    description = models.TextField()
    
    # Affected devices
    devices = models.ManyToManyField(NetworkDevice, related_name='maintenance_windows')
    
    # Schedule
    start_time = models.DateTimeField()
    end_time = models.DateTimeField()
    
    # Status
    is_active = models.BooleanField(default=True)
    created_by = models.ForeignKey(User, on_delete=models.CASCADE)
    
    # Notifications
    notify_customers = models.BooleanField(default=True)
    notification_sent = models.BooleanField(default=False)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'maintenance_windows'
        ordering = ['-start_time']
    
    def __str__(self):
        return f"{self.title} - {self.start_time}"


class NetworkTopology(models.Model):
    """Network topology and connections"""
    source_device = models.ForeignKey(NetworkDevice, on_delete=models.CASCADE, related_name='connections_from')
    source_interface = models.ForeignKey(NetworkInterface, on_delete=models.CASCADE, related_name='connections_from')
    
    destination_device = models.ForeignKey(NetworkDevice, on_delete=models.CASCADE, related_name='connections_to')
    destination_interface = models.ForeignKey(NetworkInterface, on_delete=models.CASCADE, related_name='connections_to')
    
    connection_type = models.CharField(max_length=50, blank=True)
    bandwidth = models.BigIntegerField(null=True, blank=True, help_text="Bandwidth in bps")
    
    is_active = models.BooleanField(default=True)
    discovered_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        db_table = 'network_topology'
        unique_together = ('source_interface', 'destination_interface')
    
    def __str__(self):
        return f"{self.source_device.name} -> {self.destination_device.name}"