# Docker Compose for HaroonNet ISP Platform - Simplified Version
# Use this version if you encounter volume mounting issues

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: haroonnet-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-haroonnet123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-haroonnet}
      MYSQL_USER: ${MYSQL_USER:-haroonnet}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-haroonnet123}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - haroonnet
    command: --default-authentication-plugin=mysql_native_password

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: haroonnet-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - haroonnet

  # FreeRADIUS Server - Simplified (no log volume mounting)
  freeradius:
    build:
      context: ./services/freeradius
      dockerfile: Dockerfile
    container_name: haroonnet-freeradius
    restart: unless-stopped
    ports:
      - "1812:1812/udp"  # Authentication
      - "1813:1813/udp"  # Accounting
      - "3799:3799/udp"  # CoA/DM
    volumes:
      - ./config/freeradius:/etc/freeradius/3.0
    tmpfs:
      - /var/log/freeradius:rw,size=100m
    environment:
      - DB_HOST=mysql
      - DB_NAME=${RADIUS_DB_NAME:-radius}
      - DB_USER=${RADIUS_DB_USER:-radius}
      - DB_PASSWORD=${RADIUS_DB_PASSWORD:-radpass}
    depends_on:
      - mysql
    networks:
      - haroonnet

  # API Backend
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: haroonnet-api
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret}
      - DB_HOST=mysql
      - DB_NAME=${MYSQL_DATABASE:-haroonnet}
      - DB_USER=${MYSQL_USER:-haroonnet}
      - DB_PASSWORD=${MYSQL_PASSWORD:-haroonnet123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    networks:
      - haroonnet

  # Admin UI
  admin-ui:
    build:
      context: ./services/admin-ui
      dockerfile: Dockerfile
    container_name: haroonnet-admin-ui
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:4000
    depends_on:
      - api
    networks:
      - haroonnet

  # Customer Portal
  customer-portal:
    build:
      context: ./services/customer-portal
      dockerfile: Dockerfile
    container_name: haroonnet-customer-portal
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:4000
    depends_on:
      - api
    networks:
      - haroonnet

  # Worker Service
  worker:
    build:
      context: ./services/worker
      dockerfile: Dockerfile
    container_name: haroonnet-worker
    restart: unless-stopped
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DB_HOST=mysql
      - DB_NAME=${MYSQL_DATABASE:-haroonnet}
      - DB_USER=${MYSQL_USER:-haroonnet}
      - DB_PASSWORD=${MYSQL_PASSWORD:-haroonnet123}
    depends_on:
      - mysql
      - redis
    networks:
      - haroonnet

  # Scheduler Service
  scheduler:
    build:
      context: ./services/worker
      dockerfile: Dockerfile
    container_name: haroonnet-scheduler
    restart: unless-stopped
    command: celery -A app.celery beat --loglevel=info
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DB_HOST=mysql
      - DB_NAME=${MYSQL_DATABASE:-haroonnet}
      - DB_USER=${MYSQL_USER:-haroonnet}
      - DB_PASSWORD=${MYSQL_PASSWORD:-haroonnet123}
    depends_on:
      - mysql
      - redis
    networks:
      - haroonnet

  # Flower for monitoring workers
  flower:
    build:
      context: ./services/worker
      dockerfile: Dockerfile
    container_name: haroonnet-flower
    restart: unless-stopped
    ports:
      - "5555:5555"
    command: celery -A app.celery flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - haroonnet

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: haroonnet-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - haroonnet

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: haroonnet-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - haroonnet

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  haroonnet:
    driver: bridge
    enable_ipv6: false
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
